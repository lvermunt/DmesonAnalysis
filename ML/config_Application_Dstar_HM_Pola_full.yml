input: # files to use, set FD to null for binary classification
    prompt_foldername: /data/TTree/DstarFemto/vAN-20211215_ROOT6-1/pp_sim/662_20211216-1321/merged/
    prompt: Prompt__Dstar_MC_20161718_HM_Opti_pT_0_50.parquet.gzip
    FD_foldername: /data/TTree/DstarFemto/vAN-20211215_ROOT6-1/pp_sim/662_20211216-1321/merged/
    FD: FD__Dstar_MC_20161718_HM_Opti_pT_0_50.parquet.gzip
    #data_foldername: /data/TTree/DstarFemto/vAN-20220110_ROOT6-1/pp_data/667_20220111-0843/merged/
    data_foldername: /data/TTree/DstarFemto/vAN-20211121_ROOT6-1/pp_cern.ch/652_20211123-1056/unmerged/
    data: Data__Dstar_Data_20161718_HM_Pola_vall_pT_0_50.parquet.gzip
    treename: null

    #null if you don't want to apply preselections
    preselections: null 
    #nsigComb_Pi_0 < 80 and nsigComb_Pi_1 < 80 and nsigComb_Pi_2 < 80 and nsigComb_K_0 < 80 and nsigComb_K_1 < 80 and nsigComb_K_2 < 80 and abs(nsigComb_Pi_0) != 999 and abs(nsigComb_Pi_1) != 999 and abs(nsigComb_Pi_2) != 999 and abs(nsigComb_K_0) != 999 and abs(nsigComb_K_1) != 999 and abs(nsigComb_K_2) != 999

output:
    leg_labels: # legend labels, keep the right number of classes
        Bkg: Background
        Prompt: Prompt D$^{*+}$
        FD: Feed-down D$^{*+}$
    out_labels: # output labels, keep the right number of classes
        Bkg: Bkg
        Prompt: Prompt
        FD: FD
    #dir: '/data/TTree/DstarFemto/vAN-20220110_ROOT6-1/pp_data/667_20220111-0843/applied_050122_v1/' # output dir
    dir: '/data/TTree/DstarFemto/vAN-20211121_ROOT6-1/pp_cern.ch/652_20211123-1056/applied_HM_Pola/' # output dir

pt_ranges: # ranges in pt to split the data in the ml training and testing
    min: [3, 4, 5, 6, 7, 12] # list
    max: [4, 5, 6, 7, 12, 50] # list

data_prep:
    filt_bkg_mass: inv_mass > .155 # pandas query to select bkg candidates
    dataset_opt: equal  # change how the dataset is built, options available: 'equal', 'max_signal'
                        # 'equal' -> same number of prompt/FD/bkg (not using all the signal available)
                        # 'max_signal' -> try to use all the signal (prompt and FD) + add n_bkg = 2 * (n_prompt + n_FD)
    bkg_mult: [2., 1., 0.5, 0.3, 0.3, 0.2] # list of multipliers for (nPrompt + nFD) used to determine nCandBkg in the 'max_signal' option
    max_cand_for_equal: 500000
    seed_split: 42 # seed used for train_test_split(...)
    test_fraction: 1.0 # fraction of data used for test set and efficiencies     

ml:
    raw_output: False # use raw_output (True) of probability (False) as output of the model
    roc_auc_average: 'macro' # 'macro' or 'weighted'
    roc_auc_approach: 'ovo'  # 'ovo' or 'ovr'
    training_columns: [ d_len, d_len_xy, norm_dl_xy, cos_p, cos_p_xy, dca, imp_par_xy, max_norm_d0d0exp, nsigComb_Pi_0, nsigComb_K_0, 
                        nsigComb_Pi_1, nsigComb_K_1, nsigComb_Pi_2, nsigComb_K_2, delta_mass_D0]
                       # list of training variables
    
    saved_models: [/cvmfs/alice.cern.ch/data/analysis/2022/vAN-20220109/PWGHF/vertexingHF/XGBoostModels/Dstarpp13TeVMB/300821/XGBoostModel_pT_3_5.model,
                   /cvmfs/alice.cern.ch/data/analysis/2022/vAN-20220109/PWGHF/vertexingHF/XGBoostModels/Dstarpp13TeVMB/300821/XGBoostModel_pT_3_5.model,
                   /cvmfs/alice.cern.ch/data/analysis/2022/vAN-20220109/PWGHF/vertexingHF/XGBoostModels/Dstarpp13TeVMB/300821/XGBoostModel_pT_5_7.model,
                   /cvmfs/alice.cern.ch/data/analysis/2022/vAN-20220109/PWGHF/vertexingHF/XGBoostModels/Dstarpp13TeVMB/300821/XGBoostModel_pT_5_7.model,
                   /cvmfs/alice.cern.ch/data/analysis/2022/vAN-20220109/PWGHF/vertexingHF/XGBoostModels/Dstarpp13TeVMB/300821/XGBoostModel_pT_7_12.model,
                   /cvmfs/alice.cern.ch/data/analysis/2022/vAN-20220109/PWGHF/vertexingHF/XGBoostModels/Dstarpp13TeVMB/300821/XGBoostModel_pT_12_50.model
                  ] # list of saved ModelHandler (path+file), compatible with the pt bins

plots:
    plotting_columns: [inv_mass, pt_cand, d_len, d_len_xy, norm_dl_xy, cos_p, cos_p_xy, dca, imp_par_xy, max_norm_d0d0exp,
                       delta_mass_D0, cos_t_star, angle_D0dkpPisoft, imp_par_prod,
                       nsigComb_Pi_0, nsigComb_K_0, nsigComb_Pi_1, nsigComb_K_1, nsigComb_Pi_2, nsigComb_K_2]
                       # list of variables to plot
    train_test_log: True # use log scale for plots of train and test distributions
  
appl: 
    column_to_save_list: ['inv_mass', 'pt_cand'] # list of variables saved in the dataframes with the applied models

standalone_appl:
    inputs: [] # list of parquet files for the model application
    output_names: [] # names for the outputs (one for each file)
    output_dir: null # output directory
